name: Flutter CI/CD for Android and Windows

on:
  push:
    branches: [ master ]

jobs:
  build-windows:
    name: Build & Deploy Windows EXE
    runs-on: windows-latest
    needs: build-android

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate localization files
        run: flutter gen-l10n

      - name: Build EXE
        run: flutter build windows --release

      - name: Install NSIS
        run: choco install nsis -y


      - name: Set VERSION based on GitHub run number
        run: |
          $build = "${{ github.run_number }}"
          $version = "2.1.$build.0" 
          echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: Replace version in installer_script.nsi
        run: |
          (Get-Content 'installer_script.nsi') `
            -replace '!define VERSION ".*"', '!define VERSION "${{ env.VERSION }}"' `
          | Set-Content 'installer_script.nsi'


      - name: Make installer using NSIS
        run: makensis installer_script.nsi

      - name: Upload Installer to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          file: AidSystemSetup-${{ env.VERSION }}.exe
          repo_token: ${{ secrets.GH_RELEASE_TOKEN }}
          tag: release-${{ github.run_number }}
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compress Windows Release Folder
        run: |
          powershell Compress-Archive `-Path build/windows/x64/runner/Release/*` -DestinationPath build/windows/x64/runner/app-windows-release.zip

      - name: Upload ZIP to GitHub Releases
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_RELEASE_TOKEN }}
          file: build/windows/x64/runner/app-windows-release.zip
          asset_name: app-windows-release.zip
          tag: release-${{ github.run_number }}
          overwrite: true

      - name: Create latest.json file
        run: |
          echo '{ "version": "${{ env.VERSION }}", "name": "Aid System", "url": "https://github.com/ityasser/Aid-Delivery-System-App/releases/download/release-${{ github.run_number }}/AidSystemSetup-${{ env.VERSION }}.exe" }' > latest.json

      - name: Upload latest.json to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_RELEASE_TOKEN }}
          file: latest.json
          asset_name: latest.json
          tag: release-${{ github.run_number }}
          overwrite: true

# EXE Only
#      - name: Upload EXE to GitHub Releases
#        uses: svenstaro/upload-release-action@v2
#        with:
#          repo_token: ${{ secrets.GH_RELEASE_TOKEN }}
#          file: build/windows/x64/runner/Release/aid_registry_flutter_app.exe
#          tag: release-${{ github.run_number }}
#          overwrite: true

  build-android:
    name: Build & Deploy Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate localization files
        run: flutter gen-l10n

      # Decode the keystore file from base64
      - name: Decode keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks

      # Generate key.properties file
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      # Build the signed APK
      - name: Build APK
        run: flutter build apk --release


      # Upload APK to GitHub Releases
      - name: Upload APK to GitHub Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/app/outputs/flutter-apk/app-release.apk
          tag: release-${{ github.run_number }}
          name: Android Release ${{ github.run_number }}
          token: ${{ secrets.GH_RELEASE_TOKEN }}

      # Upload APK to Firebase App Distribution
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          file: build/app/outputs/flutter-apk/app-release.apk
          releaseNotes: "Automated CI/CD Release"
          testers: "ity5sser@gmail.com"
